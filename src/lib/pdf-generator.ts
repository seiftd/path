import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PDFData {
  idea: {
    text: string;
    category: string;
    created_at: string;
  };
  responses: Array<{
    question: string;
    answer: string;
  }>;
  pathContent: {
    [key: string]: string[];
  };
  resources: Array<{
    title: string;
    url: string;
    type: string;
  }>;
  user: {
    name: string;
    email: string;
  };
}

export const generatePDF = async (data: PDFData): Promise<Blob> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  let yPosition = 20;

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    pdf.setFontSize(fontSize);
    if (isBold) {
      pdf.setFont('helvetica', 'bold');
    } else {
      pdf.setFont('helvetica', 'normal');
    }
    
    const lines = pdf.splitTextToSize(text, pageWidth - 40);
    lines.forEach((line: string) => {
      if (yPosition > pageHeight - 20) {
        pdf.addPage();
        yPosition = 20;
      }
      pdf.text(line, 20, yPosition);
      yPosition += fontSize * 0.5;
    });
    yPosition += 10;
  };

  // Header
  pdf.setFillColor(41, 128, 185);
  pdf.rect(0, 0, pageWidth, 30, 'F');
  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(20);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Found Your Path', 20, 20);
  pdf.setFontSize(12);
  pdf.text('Project Blueprint Report', 20, 25);

  // Reset text color
  pdf.setTextColor(0, 0, 0);
  yPosition = 40;

  // User Information
  addText('Project Information', 16, true);
  addText(`Generated for: ${data.user.name} (${data.user.email})`);
  addText(`Date: ${new Date(data.idea.created_at).toLocaleDateString()}`);
  addText(`Category: ${data.idea.category}`);
  yPosition += 10;

  // Original Idea
  addText('Your Original Idea', 14, true);
  addText(data.idea.text);
  yPosition += 10;

  // Refined Responses
  if (data.responses.length > 0) {
    addText('Refined Information', 14, true);
    data.responses.forEach((response, index) => {
      addText(`${index + 1}. ${response.question}`, 12, true);
      addText(`Answer: ${response.answer}`);
      yPosition += 5;
    });
    yPosition += 10;
  }

  // Business Plan
  addText('Your Business Plan', 14, true);
  Object.entries(data.pathContent).forEach(([category, steps]) => {
    addText(category, 12, true);
    steps.forEach((step, index) => {
      addText(`  ${index + 1}. ${step}`);
    });
    yPosition += 5;
  });
  yPosition += 10;

  // Resources
  if (data.resources.length > 0) {
    addText('Recommended Resources', 14, true);
    data.resources.forEach((resource, index) => {
      addText(`${index + 1}. ${resource.title}`, 12, true);
      addText(`   Type: ${resource.type}`);
      if (resource.url) {
        addText(`   Link: ${resource.url}`);
      }
      yPosition += 5;
    });
  }

  // Footer
  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    pdf.setFontSize(10);
    pdf.setTextColor(128, 128, 128);
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 50, pageHeight - 10);
    pdf.text('Generated by Found Your Path', 20, pageHeight - 10);
  }

  return pdf.output('blob');
};

export const generatePDFFromHTML = async (elementId: string): Promise<Blob> => {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error('Element not found');
  }

  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
  });

  const imgData = canvas.toDataURL('image/png');
  const pdf = new jsPDF();
  const imgWidth = 210;
  const pageHeight = 295;
  const imgHeight = (canvas.height * imgWidth) / canvas.width;
  let heightLeft = imgHeight;

  let position = 0;

  pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
  heightLeft -= pageHeight;

  while (heightLeft >= 0) {
    position = heightLeft - imgHeight;
    pdf.addPage();
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;
  }

  return pdf.output('blob');
};
